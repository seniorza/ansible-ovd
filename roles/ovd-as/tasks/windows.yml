# Copyright (C) 2018 Inuvika Inc.
# https://www.inuvika.com
# Author David PHAM-VAN <d.phamvan@inuvika.com> 2018
# Author Julien Langlois <julien@inuvika.com> 2018
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Verify "ovd_as_setup_type" parameter validity
  assert:
    that:
      - ovd_as_setup_type is defined
      - ovd_as_setup_type in ("exe", "msi")

- name: Enable audio service
  win_service:
    name: Audiosrv
    start_mode: auto
    state: started

- name: "Configure Windows Firewall for OVD"
  when: ovd_system_fw is not defined
  win_firewall_rule:
    name: OVD 1112
    description: "Inuvika OVD tcp port 1112"
    protocol: tcp
    direction: in
    localport: 1112
    action: allow
    state: present

- name: Wait for no scheduled tasks
  win_shell: Get-ScheduledTask | Where TaskPath -like "*TaskScheduler*"
  register: result
  until: result.stdout.find("Running") == -1
  retries: 30
  delay: 10
  changed_when: False

- name: Install RDS
  win_feature:
    name: "RDS-RD-Server"
    state: present
    restart: no
    include_sub_features: yes
    include_management_tools: yes
  register: install_rds
  notify: "Reboot if requested by win_feature"

- name: Configure RDS
  win_shell: |
    echo "nothing"

    $wmi_rds = (Get-WmiObject Win32_TerminalServiceSetting -Namespace root\cimv2\TerminalServices)
    if ($wmi_rds.AllowTsConnections -ne "1") {
      echo "Set AllowTsConnections to 1"
      $wmi_rds.SetAllowTsConnections(1,1);
    }

    $expected = 1

    $wmi_rdp = (Get-WmiObject -Class "Win32_TSGeneralSetting" -Namespace root\cimv2\TerminalServices -Filter "TerminalName='RDP-tcp'")

    if ($wmi_rdp.UserAuthenticationRequired -ne $expected) {
      echo "Set UserAuthenticationRequired to $expected"
      $wmi_rdp.SetUserAuthenticationRequired($expected);
    }
  register: result
  changed_when: result.stdout_lines[-1] != "nothing"

- name: Set RDP User Authentication Level
  win_regedit:
    path: HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp
    name: UserAuthentication
    data: "1"
    type: dword

- name: Set RDP Minimum Encryption Level
  win_regedit:
    path: HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp
    name: MinEncryptionLevel
    data: "2"
    type: dword

- name: Set RDP Security Layer
  win_regedit:
    path: HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp
    name: SecurityLayer
    data: "1"
    type: dword

- name: Install Microsoft Redistributable
  when:
    - ovd_as_setup_type == "msi"
    - ovd_version is version('3.0', '>=')
  block:
    - name: Install Microsoft Visual C++ 2008 SP1 Redistributable Package
      when: ovd_version is version('3.0.99', '<')
      win_chocolatey:
        name: vcredist2008

    - name: Install Microsoft Visual C++ Redistributable for Visual Studio 2017
      win_chocolatey:
        name: vcredist2017

- name: Set the ApplicationServer filename for OVD version 2.8.2
  when: ovd_version is version('2.8.2', '==')
  set_fact:
    oas_setup_base: Inuvika-OVD-2.8.2.1-ApplicationServer

- name: Set the ApplicationServer filename
  when: oas_setup_base is not defined
  set_fact:
    oas_setup_base: "Inuvika-OVD-{{ ovd_version }}-ApplicationServer"

- name: Download OVD Windows Application Server
  ansible.windows.win_get_url:
    url: '{{ ovd_repo }}/{{ oas_setup_base }}.{{ ovd_as_setup_type }}'
    dest: '%TEMP%\{{ oas_setup_base }}.{{ ovd_as_setup_type }}'
    force: no
  tags: [ovd, ovd-as]

- name: Extract the certificate from the Inuvika setup
  win_shell: "[System.IO.File]::WriteAllBytes('{{ oas_setup_base }}.cer', (Get-AuthenticodeSignature '{{ oas_setup_base }}.{{ ovd_as_setup_type }}').SignerCertificate.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert));"
  args:
    chdir: "{{ ansible_env.TEMP }}"
    creates: "{{ ansible_env.TEMP }}\\{{ oas_setup_base }}.cer"
  tags: [ovd, ovd-as]

- name: Install the Inuvika code-sign certificate as a trusted publisher
  win_certificate_store:
    path: "{{ ansible_env.TEMP }}\\{{ oas_setup_base }}.cer"
    store_name: TrustedPublisher
  tags: [ovd, ovd-as]

- name: "Install OVD Windows Application Server ({{ ovd_as_setup_type }})"
  win_package:
    path: "{{ ansible_env.TEMP }}\\{{ oas_setup_base }}.{{ ovd_as_setup_type }}"
    arguments: "{{ '/S' if ovd_as_setup_type == 'exe' else omit }}"
    product_id: "{{ 'Inuvika OVD Application Server' if ovd_as_setup_type == 'exe' else omit }}"
    state: present
  tags: [ovd, ovd-as]

- name: Configure Session Manager
  win_regedit:
    key: HKLM:\SOFTWARE\OVD\SlaveServer
    value: session_manager
    data: "{{ ovd_session_manager }}"
  tags: [ovd, ovd-as]
  notify:
    - Restart OVD Windows Application Server

- name: Configure Logs
  win_regedit:
    key: HKLM:\SOFTWARE\OVD\SlaveServer\log
    value: level
    data: "{{ ovd_slaveserver_log_levels }}"
  tags: [ovd, ovd-as]
  notify:
    - Restart OVD Windows Application Server

- name: Ensure OVD service is started
  win_service:
    name: OVD
    state: started
  tags: [ovd, ovd-as]

- name: Add a Scheduler to restart the Windows Font Cache Service
  win_scheduled_task:
    name: FontCache
    path: Inuvika
    actions:
    - path: cmd.exe
      arguments: /C "net stop FontCache && net start FontCache"
    triggers:
    - type: daily
      start_boundary: 3am
    description: "open command prompt"
    state: present
    user: SYSTEM
  ignore_errors: yes

- name: Apply "User Isolation" KB
  when: ovd_as_isolation is defined and ovd_as_isolation|bool==true
  block:
    - name: 'Apply "User Isolation" KB : Prevent OVDUsers from writing to SystemDrive'
      win_acl:
        path: "{{ ansible_env.SystemDrive | default('C:') }}\\"
        user: "OVDUsers"
        type: deny
        rights: CreateDirectories, Write
        state: present
        propagation: None

    - name: 'Apply "User Isolation" KB : Detect ProfilesDirectory location'
      win_reg_stat:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList
        name: ProfilesDirectory
      register: profile_directory

    - name: 'Apply "User Isolation" KB : Ensure that the "ProfilesDirectory" registry key exists'
      assert:
        that:
          - profile_directory.exists
        msg: 'There is a problem with this Windows Server OS. The following registry key does not exist: "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\ProfilesDirectory".'

    - name: 'Apply "User Isolation" KB : Prevent OVDUsers to list in {{ profile_directory.value }}'
      win_acl:
        path: "{{ profile_directory.value }}"
        user: "OVDUsers"
        type: deny
        rights: ListDirectory
        state: present
        propagation: None

- name: Apply "Windows Security 2019" KB
  vars:
    winpath: '{{ ansible_env.SystemRoot | default("C:\\Windows") }}\SystemApps\Microsoft.Windows.SecHealthUI_cw5n1h2txyewy\SecHealthUI.exe'
  block:
    - name: 'Apply "Windows Security 2019" KB : Check that the Windows Security application exists'
      win_stat:
        path: "{{ winpath }}"
      register: stat_file

    - name: 'Apply "Windows Security 2019" KB : Takeown Windows Security application'
      when: stat_file.stat.exists == True
      win_owner:
        path: "{{ winpath }}"
        user: "{{ ansible_user }}"

    - name: 'Apply "Windows Security 2019" KB : Remove "Execute" ACL from Users'
      when: stat_file.stat.exists == True
      win_acl:
        path: "{{ winpath }}"
        user: "Users"
        type: deny
        rights: ExecuteFile
        state: present

- name: Install NFS Client
  when: ovd_install_nfs is defined and ovd_install_nfs|bool==true
  win_feature:
    name: NFS-Client
    state: present
  register: install_nfs
  notify: "Reboot if requested by win_feature"

- name: Install Inuvika WebDAV driver
  when: ovd_install_webdav is defined and ovd_install_webdav|bool==true
  block:
    - name: "Install Inuvika WebDAV driver: Store WebDAV driver filename into variable for OVD version 2.8.2"
      when: ovd_version is version('2.8.2', '==')
      set_fact:
        ovd_webdav_setup_base: Inuvika-OVD-2.8.2.1-webdavfs

    - name: "Install Inuvika WebDAV driver: Store WebDAV driver filename into variable"
      when: ovd_webdav_setup_base is not defined
      set_fact:
        ovd_webdav_setup_base: Inuvika-OVD-{{ ovd_version }}-webdavfs


    - name: "Install Inuvika WebDAV driver : Download installer"
      win_get_url:
        url: "{{ ovd_repo }}/{{ ovd_webdav_setup_base }}.exe"
        dest: '%TEMP%\{{ ovd_webdav_setup_base }}.exe'
        force: no

    - name: "Install Inuvika WebDAV driver : Extract the certificate from the Inuvika setup"
      win_shell: "[System.IO.File]::WriteAllBytes('{{ ovd_webdav_setup_base }}.cer', (Get-AuthenticodeSignature '{{ ovd_webdav_setup_base }}.exe').SignerCertificate.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert));"
      args:
        chdir: "{{ ansible_env.TEMP }}"
        creates: "{{ ansible_env.TEMP }}\\{{ ovd_webdav_setup_base }}.cer"

    - name: "Install Inuvika WebDAV driver : Install the Inuvika code-sign certificate as a trusted publisher"
      win_certificate_store:
        path: "{{ ansible_env.TEMP }}\\{{ ovd_webdav_setup_base }}.cer"
        store_name: TrustedPublisher

    - name: "Install Inuvika WebDAV driver : Install OVD WebDAV driver (exe)"
      win_package:
        path: "{{ ansible_env.TEMP }}\\{{ ovd_webdav_setup_base }}.exe"
        arguments: "/S"
        product_id: "Inuvika OVD WebDAV driver"
        state: present

- name: Install Remote-Assistance
  when: ovd_install_msra is defined and ovd_install_msra|bool==true
  win_feature:
    name: Remote-Assistance
    state: present
  register: install_msra
  notify: "Reboot if requested by win_feature"
